// Basics

SQL> set serveroutput on

SQL> declare
  2  name varchar2(100);
  3  begin
  4  name:='welcome to plsql';
  5  dbms_output.put_line('LTI'|| name);
  6  end;
  7  /
LTIwelcome to plsql
-----------------------------------------------------------------------------------------

##############
Q-- find power of two numbers by reading data from user.
##############
SQL> declare
  2  n1 number(3):=&a;
  3  n2 number(3):=&b;
  4  c number(3):=0;
  5  begin
  6  c:=n1**n2;
  7  dbms_output.put_line(c);
  8  end;
  9  /
Enter value for a: 2
old   2: n1 number(3):=&a;
new   2: n1 number(3):=2;
Enter value for b: 2
old   3: n2 number(3):=&b;
new   3: n2 number(3):=2;
4

-----------------------------------------------------------------------------------------

##############
Q-- find sum of two vars ( declaring local var)
##############

SQL> declare
  2  n1 number(3):=&a;
  3  n2 number(3):=&b;
  4  begin
  5  dbms_output.put_line('Declaring local variable');
  6  declare
  7  c number(3):=0;
  8  begin
  9  c:=n1+n2;
 10  dbms_output.put_line('The sum of ' ||n1||' and '||n2|| ' is '|| c);
 11  end;
 12  end;
 13  /
Enter value for a: 2
old   2: n1 number(3):=&a;
new   2: n1 number(3):=2;
Enter value for b: 2
old   3: n2 number(3):=&b;
new   3: n2 number(3):=2;
Declaring local variable
The sum of 2 and 2 is 4

PL/SQL procedure successfully completed.


##############
Q-- Show looping
##############

declare
i number(2);
j number(2);
begin
<<outer_loop>>
for i in 1..3 loop
   <<inner_loop>>
   for j in 7..9 loop
     dbms_output.put_line('i is '||i||' and j is '||j);
   end loop inner_loop;
end loop outer_loop;
end;
/
i is 1 and j is 7
i is 1 and j is 8
i is 1 and j is 9
i is 2 and j is 7
i is 2 and j is 8
i is 2 and j is 9
i is 3 and j is 7
i is 3 and j is 8
i is 3 and j is 9

##############
Q-- Show looping with conditions;
##############
declare
i number(2);
j number(2);
begin
<<outer_loop>>
for i in 1..3 loop
   <<inner_loop>>
   for j in 1..3 loop
     if(i>j) then 	
     	dbms_output.put_line('j is '||j);
     else
	dbms_output.put_line('i is '||i);
     end if;	
   end loop inner_loop;
end loop outer_loop;
end;
/

i is 1
i is 1
i is 1
j is 1
i is 2
i is 2
j is 1
j is 2
i is 3


##############
Q-- Show looping with conditions (elsif);
##############
declare
i number(2);
j number(2);
begin
<<outer_loop>>
for i in 1..3 loop
   <<inner_loop>>
   for j in 1..3 loop
     if(i>j) then 	
     	dbms_output.put_line('j is '||j);
     elsif(i=j) then 	
     	dbms_output.put_line('Result is equal' || i);
     
     else
	dbms_output.put_line('i is '||i);
     end if;	
   end loop inner_loop;
end loop outer_loop;
end;
/


Result is equal1
i is 1
i is 1
j is 1
Result is equal2
i is 2
j is 1
j is 2
Result is equal3

##############
Q-- Show case condition
##############
PL/SQL procedure successfully completed.

SQL> declare
  2  n1 number(2):=&a;
  3  begin
  4  case n1
  5  when 1 then dbms_output.put_line('Choice ' || n1);
  6  when 2 then dbms_output.put_line('Choice ' || n1);
  7  when 3 then dbms_output.put_line('Choice ' || n1);
  8  else dbms_output.put_line('No Choice');
  9  end case;
 10  end;
 11  /
Enter value for a: 1
old   2: n1 number(2):=&a;
new   2: n1 number(2):=1;
Choice 1

PL/SQL procedure successfully completed.

##############
Q-- Create table worker with  id , name and salary. then use sql and plsql to update the table accordingly
##############


SQL> create table worker(id number(3), name varchar2(10), sal number(5));

Table created.

SQL> insert into worker values(&id, '&name', &sal);
Enter value for id: 1
Enter value for name: rakesh
Enter value for sal: 2000
old   1: insert into worker values(&id, '&name', &sal)
new   1: insert into worker values(1, 'rakesh', 2000)

1 row created.

SQL> /
Enter value for id: 2
Enter value for name: reema
Enter value for sal: 2000
old   1: insert into worker values(&id, '&name', &sal)
new   1: insert into worker values(2, 'reema', 2000)

1 row created.



SQL> /
Enter value for id: 3
Enter value for name: Kiran
Enter value for sal: 3500
old   1: insert into worker values(&id, '&name', &sal)
new   1: insert into worker values(3, 'Kiran', 3500)

1 row created.

SQL>
SQL> select * from worker;

        ID NAME              SAL
---------- ---------- ----------
         1 rakesh           2000
         2 reema            2000
         3 Kiran            3500


declare
id1 worker.id%type:=1;
sal1 worker.sal%type;
begin
select sal into sal1 from worker
where id=id1;
if(sal1 < 2000) then
update worker
set sal = sal+1000
where id=id1;
dbms_output.put_line(id1);
end if;
end;
/

1

PL/SQL procedure successfully completed.


SQL> select * from worker;

        ID NAME              SAL
---------- ---------- ----------
         1 rakesh           2400
         2 reema            2000
         3 Kiran            3500

SQL>


##############
Q-- Show looping with while and normal loop;
##############
SQL> declare
  2  a number(2):=10;
  3  begin loop
  4  dbms_output.put_line(a);
  5  a:=a+10;
  6  if(a>50) then
  7  exit;
  8  end if;
  9  end loop;
 10  end;
 11  /
10
20
30
40
50
##############
Q-- Show looping with while and normal loop
##############
PL/SQL procedure successfully completed.
SQL> declare
  2  a number(2):=10;
  3  begin
  4  while(a<50)
  5  loop
  6  dbms_output.put_line(a);
  7  a:=a+10;
  8  end loop;
  9  end;
 10  /
10
20
30
40

PL/SQL procedure successfully completed.

##############
Q-- Show looping with while and display fibonnacci series
##############
SQL> declare
  2  a number(2) := 0;
  3  b number(3) := 1;
  4  res number(3);
  5  input number(2) := &n;
  6  anchor number(2):=0;
  7  begin
  8  dbms_output.put_line(a);
  9  dbms_output.put_line(b);
 10  while(anchor<input)
 11  loop
 12  res:=a+b;
 13  a:=b;
 14  b:=res;
 15  dbms_output.put_line(res);
 16  anchor:=anchor+1;
 17  end loop;
 18  end;
 19  /
Enter value for n: 6
old   5: input number(2) := &n;
new   5: input number(2) := 6;
0
1
1
2
3
5
8
13

PL/SQL procedure successfully completed.