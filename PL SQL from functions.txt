#####################
Count number of rows of worker table function
#####################
SQL> create or replace function no_of_rows
  2  return number is
  3  total number(2):=0;
  4  begin
  5  select count(*) into total
  6  from worker;
  7  return total;
  8  end;
  9  /

Function created.

SQL> declare
  2  count1 number(3):=0;
  3  begin
  4  count1:=no_of_rows;
  5  dbms_output.put_line(count1);
  6  end;
  7  /
4

PL/SQL procedure successfully completed.

------------------------------------------


#####################
find min max 
#####################

SQL> create or replace function max1(x in number, y in number)
  2  return number is
  3  maximum number(2):=0;
  4  begin
  5  if(x>y) then
  6  maximum:=x;
  7  else
  8  maximum:=y;
  9  end if;
 10  return maximum;
 11  end;
 12  /

Function created.

SQL> declare
  2  a number(2):=&a;
  3  b number(2):=&b;
  4  c number(2):=0;
  5  begin
  6  c:=max1(a,b);
  7  dbms_output.put_line(c);
  8  end;
  9  /
Enter value for a: 22
old   2: a number(2):=&a;
new   2: a number(2):=22;
Enter value for b: 55
old   3: b number(2):=&b;
new   3: b number(2):=55;
55

PL/SQL procedure successfully completed.

------------------------------------------


#####################
Factorial of a number using recursive function
#####################

SQL> create or replace function fact(x in number)
  2  return number is
  3  fac number(4):=1;
  4  begin
  5  if(x = 0) then
  6  return fac ;
  7  else
  8  fac := (x) * fact (x -1);
  9  end if;
 10  return fac;
 11  end;
 12  /

Function created.


SQL> declare
  2  input number(2):=&input;
  3  factorial number(4);
  4  begin
  5  factorial := fact(input);
  6  dbms_output.put_line(factorial);
  7  end;
  8  /
Enter value for input: 2
old   2: input number(2):=&input;
new   2: input number(2):=2;
2

PL/SQL procedure successfully completed.

SQL> /
Enter value for input: 4
old   2: input number(2):=&input;
new   2: input number(2):=4;
24

PL/SQL procedure successfully completed.

#####################
ZERO_DIVIDE exception
#####################

SQL> declare
  2  a number(2):=0;
  3  b number(2):=3;
  4  c number;
  5  begin
  6  c:=b/a;
  7  dbms_output.put_line(c);
  8  exception
  9  when ZERO_DIVIDE then
 10  dbms_output.put_line('sorry');
 11  end;
 12  /
sorry

PL/SQL procedure successfully completed.
------------------------------------------

#####################
others exception
#####################

SQL> declare
  2  a number(2):=0;
  3  b number(2):=3;
  4  c number;
  5  begin
  6  c:=b/a;
  7  dbms_output.put_line(c);
  8  exception
  9  when no_data_found then
 10  dbms_output.put_line('sorry');
 11  when others then
 12  dbms_output.put_line('sorry1');
 13  end;
 14  /
sorry1

PL/SQL procedure successfully completed.

------------------------------------------
###########
print id , name from worker table where id does not exists
###########

declare
id1 worker.id%type:=5;
name1 worker.name%type;
begin
select name into name1 from worker where id=id1;
exception
when no_data_found then
dbms_output.put_line('Sorry no record exists');
end;
/

###output###
Sorry no record exists

PL/SQL procedure successfully completed.

------------------------------------------
###########
Custom exception
###########


declare
id1 worker.id%type:=-1;
name1 worker.name%type;
invalid_id exception;
begin
if(id1<0) then
raise invalid_id;
select name into name1 from worker where id=id1;
end if;
exception
when invalid_id then 
dbms_output.put_line('Wrong Id');

when no_data_found then
dbms_output.put_line('Sorry no record exists');
end;
/
------------------------------------------

###########
Select all the columns from worker table where id is 3
###########

declare
lti_record worker%rowtype;
begin
select * into lti_record from worker where id=3;
dbms_output.put_line(lti_record.id||' '||lti_record.name||' '||lti_record.sal);
end;
/

3 Kiran 13500

PL/SQL procedure successfully completed.

------------------------------------------

###########
Declare records 
###########

declare
type product is record
(name varchar(10), id number(3), price number(3));
p1 product;
begin
p1.name:='laptop';
p1.id:=3;
p1.price:=65;
dbms_output.put_line(p1.name);
dbms_output.put_line(p1.id);
dbms_output.put_line(p1.price);
end;
/

laptop
3
65

PL/SQL procedure successfully completed.